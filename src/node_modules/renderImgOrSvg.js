const createDebug = require('debug');
const openMermaidPage = require('openMermaidPage');
const renderSVG = require('renderSVG');

const debug = createDebug('app:renderImgOrSvg');
const pptr = createDebug('app:pptr');

function bgColorFromContext(ctx) {
  const bgColor = ctx.query.bgColor?.trim();
  if (bgColor && /^(![a-z]+)|([\da-f]{3,8})$/i.test(bgColor)) {
    // either a named color if prefiexed with "!" (e.g. "!red"),
    // or an hexadecimal without the "#" (444, EFEFEF, FF000055)
    return bgColor.startsWith('!') ? bgColor.substring(1) : `#${bgColor}`;
  }
}

module.exports = (render) => async (ctx, encodedCode, _next) => {
  debug(`start to render, code: ${encodedCode}`);

  let page, bgColor;
  try {
    page = await openMermaidPage(ctx);
    bgColor = bgColorFromContext(ctx);
    debug('loaded local mermaid page');

    try {
      await renderSVG({ page, encodedCode, bgColor });
      debug('rendered SVG in DOM');
    } catch (e) {
      debug('mermaid failed to render SVG: %o', e);
      ctx.throw(400, 'invalid encoded code');
    }
    await render(ctx, page);
  } catch (e) {
    // here don't throw 500 if exception has already been thrown inside try-catch
    if (!ctx.headerSent) {
      debug('*** caught exception ***');
      debug(e);

      ctx.throw(500, e);
    }
  } finally {
    if (!pptr.enabled) {
      if (page) await page.close();
    }
  }
};
